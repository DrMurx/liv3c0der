{"name":"Liv3c0der","tagline":"live coding audiovisual experiences in your browser","body":"## liv3c0der\r\n\r\nA try to build an audiovisual live coding environment that's running in the browser\r\n\r\nDocumentation is sparse, please look at the examples.\r\n\r\nCurrently, the live code should contain two methods:\r\n\r\ndraw(canvasContext,state, analyzerData)\r\n* draw will be called within the canvas loop that is based on requestAnimationFrame\r\n* canvasContext is the 2d context of the full screen canvas element (only 2d is supported ATM)\r\n* state is a magical state object you can use to store data that should persist between loop runs\r\n  * state has an init-function that let's you init values if they are not yes existent.\r\n* analyserData is a 16 element float32array of fft data from the sound source. do your thang.\r\n\r\npattern(context, outlet, start_times, step_time, state, data)\r\n* pattern will be called once every time the pattern loops. The pattern is (currently) a 16 step\r\n* pattern with every step matching a 1/16 note.\r\n* *context* is the audioContext\r\n* *outlet* is the audio destination your webaudio objects should ultimately connect to\r\n* *start_times* is an array of start times for the notes in the pattern\r\n* *step_time* is the length of a single step\r\n* *state* is the beforementioned state object (note that the canvas loop and the pattern loop indeed share this object)\r\n* *data* is unused and will most probably contain prefabbed samples etc.\r\n\r\n\r\n### Sound Tools\r\n\r\n* LC.NOTES contains the MIDI array of note frequencies, so LC.NOTES[0] gives you the lowest C\r\n* LC.LEnv is an Envelope generator created with linearRamps.\r\n  * Signature is (param,time,length,min, max,attack,decay,sustain,release)\r\n  * a,d,r are expressed as fractions of length\r\n  * sustain as fraction of max\r\n\r\n* LC.S is an object containing all loaded samples. The list is currently hardcoded in livecoder.coffee\r\n* All samples willl be loaded automatically and can be played as soon as they are completely decoded.\r\n* LC.S.<samplename> is a sample object that has two public methods\r\n  * play(outlet, time, length, rate)\r\n  * playGrain(outlet, time, offset, length, rate)\r\n* LC.DelayLine - a configurable delay line that can be used as an output\r\n  * DelayLine.delayTime\r\n  * DelayLine.filterFrequency\r\n  * DelayLine.feedback\r\n\r\n\r\n### Planned sound tools\r\n\r\n\r\n* LC.ReverbLine - a configurable reverb line that can be used as an output\r\n\r\n","google":"UA-11165670-6","note":"Don't delete this file! It's used internally to help with page regeneration."}